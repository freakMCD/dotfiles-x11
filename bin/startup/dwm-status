#!/bin/bash

# INIT
printf "$$" > ~/.cache/pidofbar

check=1
sec=0

# Colors
white=#cdd6f4
black=#11111b
green=#ABE9B3
blue=#96CDFB
grey=#6c7086
red=#F28FAD
darkblue=#83bae8
darkgrey=#1e1e2e

update_network () {
    checknet=$(nslookup google.com >&/dev/null; echo $?)

    if [ $checknet -eq 0 ]; then
		network=" ^c$green^󰈀 up"
        if [ $check -eq 1 ]; then
            notify-send "Network" "Connected"
            check=0
        fi
    else 
		network=" ^c$red^󰈀 down"
        if [ $check -eq 0 ]; then
            notify-send "Network" "Disconnected"
            check=1
        fi
	fi
}

update_cpu () {
    cpu="^c$black^^b$green^ CPU ^c$white^^b$darkgrey^ $(grep -o "^[^ ]*" /proc/loadavg) ^d^"
}

update_memory () { 
    mem="^c$blue^^b$black^ 󰍛 ^c$white^$(awk '/MemT/ {t=$2/1000**2} /^(MemF|Bu|Ca)/ {f+=$2/1000**2} END {printf "%.1fG^c'"$darkblue"'^/%dG",t-f,t}' /proc/meminfo)"
}

update_disk () {
    disk="^c$blue^  ^c$white^$(df -Ph | grep "/dev/sda3" | awk {'print $5'})"
}

update_time() { 
    time="$(date "+ ^c$blue^  ^c$white^ %a-%d-%b ^c$black^^b$darkblue^ 󰥔 ^c$black^^b$blue^ %R")"
}

# modules that don't update on their own
# they are also run at the start for getting the initial value
update_vol () { 
    vol="$([ "$(pactl get-sink-mute @DEFAULT_SINK@ | awk '{print $2}')" = "no" ] && printf "^c$blue^󰕾^c$white^^f2^" || printf "^c$red^󰝟^f2^") $(pactl get-sink-volume 0 | awk '{print $5}')"
}
update_vol

update_song () {
    if [[ $(mpc status %state%) == 'playing' ]]; then
        song="^c$blue^ ^c$white^ $(mpc current)"
    elif [[ $(mpc status %state%) == 'paused' ]]; then
        song="^c$grey^  $(mpc current)" 
    else 
        song="fail"
    fi
}

display () {
    xprop -root -set WM_NAME "$song       $vol  $cpu $network $mem $disk $time  "
}

# signals for each module to update while updating display. RTMIN is 33
trap "update_vol;display" "RTMIN"
trap "update_song;display" "RTMIN+1"

while true; do
	    # how many seconds each module updates
        [ $((sec % 5)) -eq 0 ] && update_network
	    [ $((sec % 5)) -eq 0 ] && update_memory
	    [ $((sec % 15)) -eq 0 ] && update_cpu 
	    [ $((sec % 60 )) -eq 0 ] && update_time
	    [ $((sec % 1800)) -eq 0 ] && update_disk
	    
	    # how often the display updates
	    [ $((sec % 5 )) -eq 0 ] && display
	    sleep 1 & wait && sec=$((sec + 1))
done


